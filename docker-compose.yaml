# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.0-python3.8}
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.1}
  environment:
    &airflow-common-env
    AIRFLOW_HOST: webserver
    AIRFLOW_PORT: 8080
    AIRFLOW_HOME: /opt/airflow/
    AIRFLOW__CORE__EXECUTOR: DaskExecutor
    # AIRFLOW__CORE__DAGS_FOLDER: ./airflow/dags
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__DASK__CLUSTER_ADDRESS: dask-scheduler:8786
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.default
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    depends_on:
      - postgres
      - dask-worker
      - dask-scheduler
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  airflow-scheduler:
    # <<: *airflow-common
    build:
      context: './base'
      dockerfile: './Dockerfile'
    environment:
      <<: *airflow-common-env
    image: 'daskdev/dask:2021.2.0'
    depends_on:
      - airflow-webserver
    command: airflow scheduler
    restart: always
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins

  dask-scheduler:
    build:
      context: './base'
      dockerfile: './Dockerfile'
    image: 'daskdev/dask:2021.2.0'
    environment:
      <<: *airflow-common-env
      # EXTRA_PIP_PACKAGES: git+https://github.com/dask/dask.git
    hostname: 'dask-scheduler'
    ports:
      - "8786:8786"
      - "8787:8787"
    command: ["dask-scheduler"]
    volumes:
      - ./src:/app/src
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins

  dask-worker:
    depends_on:
      - dask-scheduler
    build:
      context: './base'
      dockerfile: './Dockerfile'
    image: 'daskdev/dask:2021.2.0'
    environment:
      <<: *airflow-common-env
      # EXTRA_PIP_PACKAGES: git+https://github.com/dask/dask.git
    hostname: 'dask-worker'
    command: "dask-worker tcp://dask-scheduler:8786 --nprocs 1 --nthreads 1 --memory-limit=4e8"
    # command: >
    #   bash -c
    #   "dask-worker tcp://dask-scheduler:8786 &
    #   airflow serve_logs"
    volumes:
      - ./src:/app/src
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
  
  jupyterlab:
    build:
      context: './jupyterlab'
      dockerfile: './Dockerfile'
    command: 'jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=/app --allow-root'
    environment:
      - DASK_SCHEDULER_ADDRESS="tcp://dask-scheduler:8786"
      # - EXTRA_PIP_PACKAGES=git+https://github.com/dask/dask.git
    ports:
      - "8888:8888"
    volumes:
      - ./src:/app/src
      - ./airflow/dags:/app/src/dags

volumes:
  postgres-db-volume:
